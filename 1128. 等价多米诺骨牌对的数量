/*
给你一个由一些多米诺骨牌组成的列表 dominoes。
如果其中某一张多米诺骨牌可以通过旋转 0 度或 180 度得到另一张多米诺骨牌，我们就认为这两张牌是等价的。
形式上，dominoes[i] = [a, b] 和 dominoes[j] = [c, d] 等价的前提是 a==c 且 b==d，或是 a==d 且 b==c。
在 0 <= i < j < dominoes.length 的前提下，找出满足 dominoes[i] 和 dominoes[j] 等价的骨牌对 (i, j) 的数量。
*/
/*
O(n) = n²会超时。
因为保存元素都是≥1，并且≤9，于是建立9*9辅助数组。保存下标左小右大的信息(提前把题目中的二维数组排成左小右大的信息)。
*/

int numEquivDominoPairs(int** dominoes, int dominoesSize, int* dominoesColSize){
    if( dominoes == NULL )  return 0;
    int i, j;
    int count = 0;
    int temp;
    int TempArray[10][10]={0};
    for( i=0; i<dominoesSize; i++)
    {
        if( dominoes[i][0] <= dominoes[i][1]);
        else{
            temp = dominoes[i][0];
            dominoes[i][0] = dominoes[i][1];
            dominoes[i][1] = temp;
        }
        TempArray[dominoes[i][0]][dominoes[i][1]]++;
    }

    for( i=1; i<10; i++)
    {
        for( j=i; j<10; j++)
        {
            count += TempArray[i][j]*(TempArray[i][j]-1)/2;
        }
    }

    return count;
}
