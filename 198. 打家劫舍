/*
你是一个专业的小偷，计划偷窃沿街的房屋。每间房内都藏有一定的现金，影响你偷窃的唯一制约因素就是相邻的房屋装有相互连通的防盗系统，如果两间相邻的房屋在同一晚上被小偷闯入，系统会自动报警。

给定一个代表每个房屋存放金额的非负整数数组，计算你 不触动警报装置的情况下 ，一夜之内能够偷窃到的最高金额。

示例 1:

输入: [1,2,3,1]
输出: 4
解释: 偷窃 1 号房屋 (金额 = 1) ，然后偷窃 3 号房屋 (金额 = 3)。
     偷窃到的最高金额 = 1 + 3 = 4 。
示例 2:

输入: [2,7,9,3,1]
输出: 12
解释: 偷窃 1 号房屋 (金额 = 2), 偷窃 3 号房屋 (金额 = 9)，接着偷窃 5 号房屋 (金额 = 1)。
     偷窃到的最高金额 = 2 + 9 + 1 = 12 
*/
/*
该题用到动态分配处理
从第0家开始，每家都有两个状态可以选择：arr[i][1]选择偷他家，那么上一家就不能偷，总金额是上家没偷的金额加上这家的金额，
                                      arr[i][1]=arr[i-1][0]+nums[i];
                                      arr[i][0]选择不偷这家那么总金额为偷了上家和没偷上家的最大值,
                                      arr[i][0]=max{arr[i-1][0], arr[i-1][1]};
*/

int rob(int* nums, int numsSize){
    if( nums == NULL || numsSize == 0){
        return 0;
    }
    int arr[numsSize][2];
    arr[0][0] = 0;
    arr[0][1] = nums[0];
    int i;
    for( i=1; i<numsSize; i++)
    {
        arr[i][0] = arr[i-1][1] > arr[i-1][0] ? arr[i-1][1] : arr[i-1][0];
        arr[i][1] = arr[i-1][0]+nums[i];
    }

    return arr[numsSize-1][1] > arr[numsSize-1][0] ? arr[numsSize-1][1] : arr[numsSize-1][0];
}
