/*给定一个经过编码的字符串，返回它解码后的字符串。

编码规则为: k[encoded_string]，表示其中方括号内部的 encoded_string 正好重复 k 次。注意 k 保证为正整数。
你可以认为输入字符串总是有效的；输入字符串中没有额外的空格，且输入的方括号总是符合格式要求的。
此外，你可以认为原始数据不包含数字，所有的数字只表示重复的次数 k ，例如不会出现像 3a 或 2[4] 的输入。

示例:
s = "3[a]2[bc]", 返回 "aaabcbc".
s = "3[a2[c]]", 返回 "accaccacc".
s = "2[abc]3[cd]ef", 返回 "abcabccdcdcdef".

来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/decode-string
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。*/


char * decodeString(char * s){
    if( s == NULL){
        return NULL;
    }
    int i, j=0, k=0;
    int StackSize = 50;
    int TempSize = 10;
    char *Stack = (char *)malloc(StackSize * sizeof(char));
    int TempStackSize;
    int len = strlen(s);
    int top=0;
    int num=0;
    char temp;
    for( i=0; i<len; i++)
    {
        if( s[i] == ']'){
            top--;
            char *TempStack = (char *)malloc(TempSize * sizeof(char));
            j=0;k=0;num=0;
            while( Stack[top] != '[')
            {
                if( j == TempSize ){
                    TempStack =(char *)realloc(TempStack,(TempSize += 10) * sizeof(char));
                }
                TempStack[j] = Stack[top];
                j++;    top--;
            }
            top--;
            TempStackSize = j;
            TempStack = (char *)realloc(TempStack, (j+2) * sizeof(char));
            TempStack[j] = '\0';
            while( top >= 0 && (Stack[top] >= '0' && Stack[top] <= '9'))
            {
                num = num+(Stack[top]-'0')*pow(10,k);
                k++;top--;
            }
            top++;
            for( k=0; k<num; k++)
            {
                for( j=TempStackSize-1; j>=0; j--)
                {
                    if( top == StackSize ){
                        Stack = (char *)realloc(Stack, (StackSize += 50) * sizeof(char));
                    }
                    Stack[top] = TempStack[j];
                    top++;
                }
            }
            free(TempStack);
        }else{
            if( top == StackSize ){
                Stack = (char *)realloc(Stack, (StackSize += 50) * sizeof(char));
            }
            Stack[top] = s[i];
            top++;
        }
    }
    char *result = (char *)realloc(Stack, (top+2) * sizeof(char));
    result[top] = '\0';
    Stack = result;

    return result;
    
}
