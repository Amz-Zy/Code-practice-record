/*
给出整数数组 A，将该数组分隔为长度最多为 K 的几个（连续）子数组。分隔完成后，每个子数组的中的值都会变为该子数组中的最大值。

返回给定数组完成分隔后的最大和。

 

示例：

输入：A = [1,15,7,9,2,5,10], K = 3
输出：84
解释：A 变为 [15,15,15,9,10,10,10]
*/

int max(int a, int b)
{
    return a>=b?a:b;
}

int maxSumAfterPartitioning(int* A, int ASize, int K){
    int i, j;
    int dp[ASize];
    int num=A[0];
    int maxSum=0;
    for( i=0; i<ASize; i++)
    {
        if( i<K ){
            num = max(num, A[i]);
            dp[i] = num*(i+1);
        }else{
            num = A[i];
            for( j=0; j<K; j++)
            {
                num = max(A[i-j], num);
                maxSum = max(maxSum, dp[i-j-1]+num*(j+1));
            }
            dp[i] = maxSum;
        }
    }

    return dp[i-1];
}


/*
dp[i]  前i个元素最大值的和
maxSum = max{maxSum, dp[i-前几个元素]+临时最大值*个数};
dp = maxSum;
*/
