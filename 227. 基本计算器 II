/*
实现一个基本的计算器来计算一个简单的字符串表达式的值。
字符串表达式仅包含非负整数，+， - ，*，/ 四种运算符和空格  。 整数除法仅保留整数部分。
*/
/*
运用堆栈保存每个运算结果，最终处理栈内的和
但是执行时间较长，需要优化。
/*


int calculate(char * s){
    int i;
    int stack[strlen(s)];
    int top=0;
    int flag=0, tag;
    int num=0, num1=0, num2=0;
    for( i=0; i<strlen(s); i++)
    {
        if( s[i] == '-')
            flag = 1;
        if( s[i] >= '0' && s[i] <= '9'){
            num1 = num1*10+(s[i]-'0');
            if(i+1>=strlen(s) || s[i+1]<'0' || s[i+1]>'9'){
	            if(flag){
	                stack[top] = -num1;
	                flag=0;
	            }
	            else
	                stack[top] = num1;
	            top++;num1=0;
			}
        }else{
            if( s[i] == '*' ){
                top--;i++;
                while(s[i] < '0' || s[i] > '9')
                {
                    i++;
                }
                while(i<strlen(s) && s[i]>='0' && s[i]<='9')
                {
		            num2 = num2*10+s[i]-'0';
		            i++;
				}
                stack[top] = stack[top]*(num2);
                top++;num2=0;i--;
            }else if( s[i] == '/' ){
                top--;i++;
                while(s[i] < '0' || s[i] > '9')
                {
                    i++;
                }
                while(i<strlen(s) && s[i]>='0' && s[i]<='9')
                {
                	
		            num2 = num2*10+s[i]-'0';
		            i++;
				}
                stack[top] = stack[top]/(num2);
                top++;num2=0;i--;
            }
        }
    }

    for( i=0; i<top; i++)
    {
        num += stack[i];
    }
    return num;
}
